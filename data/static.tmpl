//
// This file was generated via github.com/skx/implant/
//
// Local edits will be lost.
//
package {{.Package}}

import (
    "bytes"
    "compress/gzip"
    "encoding/hex"
    "io/ioutil"
    "errors"
)

//
// The definition of our resources
//
type EmbeddedResource struct {
    Filename string
    Contents string
}

//
// The list of our resources
//
var RESOURCES []EmbeddedResource

//
// Populate our resources
//
func init() {

    var tmp EmbeddedResource

    {{range .Resources}}
	tmp.Filename = "{{.Filename}}"
        tmp.Contents = "{{.Contents}}"
        RESOURCES = append( RESOURCES, tmp )
    {{end}}
}

//
// Return the contents of a resource.
//
func getResource( path string  ) ([]byte, error) {
    for _, entry := range( RESOURCES ) {
	//
	// We found the file contents.
        //
        if ( entry.Filename == path ) {
			var raw bytes.Buffer

			// Decode the data.
			in, err := hex.DecodeString(entry.Contents)
			if err != nil {
				return nil, err
			}

			// Gunzip the data to the client
			gr, err := gzip.NewReader(bytes.NewBuffer(in))
			defer gr.Close()
			data, err := ioutil.ReadAll(gr)
			if err != nil {
				return nil, err
			}
			_, err = raw.Write(data)
                        if ( err != nil ) {
				return nil, err
                        }

			// Return it.
			return raw.Bytes(), nil
        }
    }
    return nil, errors.New( "Failed to find resource")
}

//
// Return the names of available resources.
//
func getResources() []string {
    var results []string

    for _, entry := range( RESOURCES ) {
        results = append( results, entry.Filename)
    }
    return results
}
